name: Build Android App
description: Build an Android app using Gradle.
inputs:
  release:
    description: Whether to build a signed release APK, or perform a build without assembling an APK.
    default: 'false'
  project:
    description: Module name.
    required: true
  app-private-key:
    description: Base64-encoded mTLS private key of the app.
    required: true
  app-certificate:
    description: Base64-encoded mTLS certificate of the app.
    required: true
  server-certificate:
    description: Base64-encoded TLS certificate of the server.
    required: true
  release-keystore:
    description: Base64-encoded keystore file.
    required: true
  release-store-key-alias:
    description: Alias of the key in the keystore.
    required: true
  release-store-key-password:
    description: Password of the key in the keystore.
    required: true
  release-store-password:
    description: Password of the keystore.
    required: true
  sentry-auth-token:
    description: Sentry authentication token.
    required: true
  sentry-dsn:
    description: Sentry DSN.
    required: true
  api-key:
    description: API key that is used on the server.
    required: true
runs:
  using: composite
  steps:
    - name: Setup JDK & Gradle
      uses: ./.github/actions/prepare-gradle

    - name: Add TLS certificates and keys
      if: ${{ inputs.release == 'true' }}
      env:
        APP_PRIVATE_KEY_PEM: ${{ inputs.app-private-key }}
        APP_CERTIFICATE_PEM: ${{ inputs.app-certificate }}
        SERVER_CERTIFICATE_PEM: ${{ inputs.server-certificate }}
      shell: sh
      run: |
        echo $APP_PRIVATE_KEY_PEM > ./${{ inputs.project }}/src/androidMain/assets/proxy-api-client-certificate-private-key.pem
        echo $APP_CERTIFICATE_PEM > ./${{ inputs.project }}/src/androidMain/assets/proxy-api-client-certificate.pem
        echo $SERVER_CERTIFICATE_PEM > ./${{ inputs.project }}/src/androidMain/assets/proxy-api-server-certificate.pem

    - name: Decode keystore
      if: ${{ inputs.release == 'true' }}
      env:
        ENCODED_STRING: ${{ inputs.release-keystore }}
      shell: sh
      run: |
        echo $ENCODED_STRING | base64 -d > release.keystore

    - name: Build signed release APK
      if: ${{ inputs.release == 'true' }}
      env:
        RELEASE_STORE_PATH: release.keystore
        RELEASE_STORE_KEY_ALIAS: ${{ inputs.release-store-key-alias }}
        RELEASE_STORE_KEY_PASSWORD: ${{ inputs.release-store-key-password }}
        RELEASE_STORE_PASSWORD: ${{ inputs.release-store-password }}
        SENTRY_AUTH_TOKEN: ${{ inputs.sentry-auth-token }}
        SENTRY_DSN: ${{ inputs.sentry-dsn }}
        API_KEY: ${{ inputs.api-key }}
      shell: sh
      run: ./gradlew ${{ inputs.project }}:assembleRelease

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      if: ${{ inputs.release == 'true' }}
      with:
        name: release-apk-${{ inputs.project }}
        path: ${{ inputs.project }}/build/outputs/apk/release/${{ inputs.project }}-release.apk

    - name: Check build
      if: ${{ inputs.release != 'true' }}
      shell: sh
      env:
        API_KEY: ${{ inputs.api-key }}
      # Using :compileReleaseKotlinAndroid to avoid creating a Sentry release, bundling resources and a few other operations
      run: ./gradlew ${{ inputs.project }}:compileReleaseKotlinAndroid
