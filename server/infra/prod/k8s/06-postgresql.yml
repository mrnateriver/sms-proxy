apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: postgresql
  namespace: sms-proxy
spec:
  secretName: tls-postgresql
  issuerRef:
    name: issuer-leaf
    kind: Issuer
  commonName: "postgresql-server"
  dnsNames:
    - "postgresql"
  duration: 2160h
  renewBefore: 360h
---
apiVersion: redhatcop.redhat.io/v1alpha1
kind: RandomSecret
metadata:
  name: password-postgresql-admin
  namespace: sms-proxy
spec:
  authentication:
    path: kubernetes
    role: vault-operator
    serviceAccount:
      name: vault-operator
  isKVSecretsEngineV2: false # It's a one-time password anyway, so we don't need KV v2; the root DB password will be rotated by Vault later
  path: kv/sms-proxy
  secretKey: password
  secretFormat:
    passwordPolicyName: default
---
apiVersion: secrets.hashicorp.com/v1beta1
kind: VaultStaticSecret
metadata:
  name: password-postgresql-admin
  namespace: sms-proxy
spec:
  type: kv-v1
  mount: kv
  path: sms-proxy/password-postgresql-admin
  destination:
    name: password-postgresql-admin
    create: true
---
apiVersion: source.toolkit.fluxcd.io/v1beta2
kind: OCIRepository
metadata:
  name: bitnami-postgresql
  namespace: sms-proxy
spec:
  interval: 1h
  url: oci://registry-1.docker.io/bitnamicharts/postgresql
  ref:
    semver: "16.4.7"
---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: postgresql
  namespace: sms-proxy
spec:
  chartRef:
    kind: OCIRepository
    name: bitnami-postgresql
    namespace: sms-proxy
  interval: 1h
  values:
    metrics:
      enabled: true
    volumePermissions:
      enabled: true
    tls:
      enabled: true
      preferServerCiphers: true
      certificatesSecret: tls-postgresql
      certFilename: "tls.crt"
      certKeyFilename: "tls.key"
      certCAFilename: "ca.crt"
    auth:
      database: sms_proxy
      existingSecret: password-postgresql-admin
      secretKeys:
        adminPasswordKey: password
    primary:
      annotations:
        wave.pusher.com/update-on-config-change: "true"
      # This configuration effectively enables mTLS
      pgHbaConfiguration: |
        hostssl all all 0.0.0.0/0 scram-sha-256 clientcert=verify-ca
        hostssl all all ::/0 scram-sha-256 clientcert=verify-ca
        hostssl all all 127.0.0.1/32 scram-sha-256 clientcert=verify-ca
        hostssl all all ::1/128 scram-sha-256 clientcert=verify-ca
---
apiVersion: redhatcop.redhat.io/v1alpha1
kind: SecretEngineMount
metadata:
  name: postgresql
  namespace: sms-proxy
spec:
  authentication:
    path: kubernetes
    role: vault-operator
    serviceAccount:
      name: vault-operator
  type: database
  path: postgresql
---
apiVersion: redhatcop.redhat.io/v1alpha1
kind: DatabaseSecretEngineConfig
metadata:
  name: postgresql
  namespace: sms-proxy
spec:
  authentication:
    path: kubernetes
    role: vault-operator
    serviceAccount:
      name: vault-operator
  pluginName: postgresql-database-plugin
  allowedRoles:
    - sms-proxy
    - sms-proxy-migrations
  connectionURL: postgresql://{{username}}:{{password}}@postgresql:5432/sms_proxy?sslmode=verify-full&sslrootcert=/vault/userconfig/tls-vault-postgresql-client/ca.crt&sslcert=/vault/userconfig/tls-vault-postgresql-client/tls.crt&sslkey=/vault/userconfig/tls-vault-postgresql-client/tls.key
  passwordPolicy: default
  rootCredentials:
    secret:
      name: password-postgresql-admin
    passwordKey: password
  username: postgres
  path: postgresql/postgresql
  rootPasswordRotation:
    enable: true
    rotationPeriod: 24h0m0s
---
apiVersion: redhatcop.redhat.io/v1alpha1
kind: DatabaseSecretEngineRole
metadata:
  name: sms-proxy
  namespace: sms-proxy
spec:
  authentication:
    path: kubernetes
    role: vault-operator
    serviceAccount:
      name: vault-operator
  path: postgresql/postgresql
  # The full format is needed because otherwise Terraform fails due to inconsistent output
  defaultTTL: 12h0m0s
  maxTTL: 12h0m0s
  dBName: postgresql
  creationStatements:
    - CREATE ROLE "{{name}}" WITH LOGIN PASSWORD '{{password}}' VALID UNTIL '{{expiration}}';
    - GRANT USAGE ON SCHEMA "public" TO "{{name}}";
    - GRANT SELECT, INSERT, UPDATE ON ALL TABLES IN SCHEMA "public" TO "{{name}}";
  revocationStatements:
    - REVOKE ALL ON ALL TABLES IN SCHEMA "public" FROM "{{name}}";
    - REVOKE ALL ON SCHEMA "public" FROM "{{name}}";
---
apiVersion: redhatcop.redhat.io/v1alpha1
kind: DatabaseSecretEngineRole
metadata:
  name: sms-proxy-migrations
  namespace: sms-proxy
spec:
  authentication:
    path: kubernetes
    role: vault-operator
    serviceAccount:
      name: vault-operator
  path: postgresql/postgresql
  # The full format is needed because otherwise Terraform fails due to inconsistent output
  defaultTTL: 5m0s
  maxTTL: 5m0s
  dBName: postgresql
  creationStatements:
    - CREATE ROLE "{{name}}" WITH LOGIN PASSWORD '{{password}}' VALID UNTIL '{{expiration}}';
    - GRANT ALL PRIVILEGES ON SCHEMA "public" TO "{{name}}";
    - GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA "public" TO "{{name}}";
  revocationStatements:
    - REVOKE ALL ON ALL TABLES IN SCHEMA "public" FROM "{{name}}";
    - REVOKE ALL ON SCHEMA "public" FROM "{{name}}";
